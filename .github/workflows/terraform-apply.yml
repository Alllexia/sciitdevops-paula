name: Terraform Apply on AWS and Azure
run-name: ${{ github.actor }} is deploying AWS and Azure
on:
  workflow_dispatch:
#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write
#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZ_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZ_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZ_TENANT_ID }}"
jobs:
  Deploy-AWS-Ec2-Azure:
    runs-on: ubuntu-latest

    steps:
        # Checkout code
        - name: Checkout code
          working-directory: ./pipeline/aws
          uses: actions/checkout@v3
          with:
            fetch-depth: 0

        # AWS Credentials w GitHub Secrets
        - name: Configure AWS credentials
          working-directory: ./pipeline/aws
          uses: aws-actions/configure-aws-credentials@v3
          with:
            aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
            aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
            aws-region: 'eu-west-1'

        # Ensure Terraform state S3 bucket exists
        - name: Create Terraform State Bucket
          working-directory: ./pipeline/aws
          run: |
            cd terraform-modules/state-bucket
            terraform init
            terraform apply -auto-approve
      
        # Reconfigure Backend to Use S3
        - name: Reconfigure Backend to S3
          working-directory: ./pipeline/aws
          run: |
            cd terraform-modules/tf-ec2-module/
            terraform init -backend-config="bucket=terraform_state_bucket" \
                         -backend-config="key=state/${GITHUB_REF#refs/heads/}/terraform.tfstate" \
                         -backend-config="region=eu-west-1"

        # Apply Terraform with S3 backend
        - name: Apply Terraform w S3 backend
          working-directory: ./pipeline/aws
          run: |
            cd terraform-modules/tf-ec2-module/
            terraform apply -auto-approve

        # Refresh Terraform State to ensure it's up to date with AWS
        - name: Refresh Terraform State
          working-directory: ./pipeline/aws
          run: |
            cd terraform-modules/tf-ec2-module/
            terraform refresh
     
        # Save instance IPs and create inventory file for Ansible
        - name: Save instance IPs and create inventory
           working-directory: ./pipeline/aws
           run: |
            INSTANCE_IPS=$(terraform output -json instance_ips)
            echo "$INSTANCE_IPS" | jq -r '.[]' > ../ansible/instance-ips.txt
            echo "[servers]" > ansible/inventory.ini
            while IFS= read -r ip; do
              echo "$ip ansible_user=ubuntu ansible_ssh_private_key_file=./scripts/devaws.pem" >> ../ansible/inventory.ini
            done < ../ansible/instance-ips.txt
      
        # Create Azure machine
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          working-directory: ./pipeline/azure
          run: |
           terraform init
           terraform apply -auto-approve
           echo $(terraform output -raw public_ip_address) > ../ansible/instance-ips-az.txt
          #(Get-AzNetworkInterface -ResourceGroupName rg).IpConfigurations.PrivateIpAddress
       
        # Wait for SSH to to be available
        - name: Wait for SSH to be available
          working-directory: ./pipeline/ansible
          run: |
            for ip in $(cat instance-ips.txt); do
              SECONDS=0
              while ! nc -z $ip 22; do
                sleep 10
                if [ $SECONDS -gt 300 ]; then
                  echo "SSH is not available on $ip after 5 minutes."
                  exit 1
                fi
              done
            done
 
        #  Add SSH Key from GitHub Secrets
        - name: Add SSH Key
          working-directory: ./pipeline/ansible
          run: |
           mkdir -p ~/.ssh
           echo "${{ secrets.PAULA_SSH }}" > ~/.ssh/devaws.pem
           chmod 400 ~/.ssh/devaws.pem
 
        # Test SSH connection
        - name: Test SSH connection
          working-directory: ./pipeline/nsible
          run: |
           INSTANCE_IP=$(terraform output -json instance_ips | jq -r 'if type == "string" then . else .[0] end')
           echo "Trying to SSH into $INSTANCE_IP"
           ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/devaws.pem ubuntu@$INSTANCE_IP
 
        # Install Ansible
        - name: Install Ansible
          working-directory: ./pipeline/ansible
          run: sudo apt update && sudo apt install -y ansible
 
        # Run Ansible Playbook to configure argocd
        - name: Run Ansible Playbook
          working-directory: ./pipeline/ansible
          run: ansible-playbook -i ansible/inventory.ini ansible/playbook.yaml -vvv
     